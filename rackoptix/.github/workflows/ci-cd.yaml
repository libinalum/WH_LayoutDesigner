name: RackOptix CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/rackoptix-backend
  API_IMAGE_NAME: ${{ github.repository }}/rackoptix-api
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/rackoptix-frontend

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, api, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        if: matrix.component == 'backend'
        run: |
          cd rackoptix/backend
          pip install -r requirements.txt
          pip install flake8 black mypy

      - name: Lint Python code
        if: matrix.component == 'backend'
        run: |
          cd rackoptix/backend
          flake8 src tests
          black --check src tests
          mypy src

      - name: Set up Node.js
        if: matrix.component == 'api' || matrix.component == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: rackoptix/${{ matrix.component }}/package-lock.json

      - name: Install Node.js dependencies
        if: matrix.component == 'api' || matrix.component == 'frontend'
        run: |
          cd rackoptix/${{ matrix.component }}
          npm ci

      - name: Lint TypeScript code
        if: matrix.component == 'api' || matrix.component == 'frontend'
        run: |
          cd rackoptix/${{ matrix.component }}
          npm run lint

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, api, frontend]
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: rackoptix
          POSTGRES_PASSWORD: rackoptix_password
          POSTGRES_DB: rackoptix_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        if: matrix.component == 'backend'
        run: |
          cd rackoptix/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Python tests
        if: matrix.component == 'backend'
        run: |
          cd rackoptix/backend
          pytest --cov=src tests/
        env:
          DATABASE_URL: postgres://rackoptix:rackoptix_password@localhost:5432/rackoptix_test

      - name: Set up Node.js
        if: matrix.component == 'api' || matrix.component == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: rackoptix/${{ matrix.component }}/package-lock.json

      - name: Install Node.js dependencies
        if: matrix.component == 'api' || matrix.component == 'frontend'
        run: |
          cd rackoptix/${{ matrix.component }}
          npm ci

      - name: Run Node.js tests
        if: matrix.component == 'api' || matrix.component == 'frontend'
        run: |
          cd rackoptix/${{ matrix.component }}
          npm test -- --coverage
        env:
          DATABASE_URL: postgres://rackoptix:rackoptix_password@localhost:5432/rackoptix_test
          NODE_ENV: test

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    strategy:
      matrix:
        component: [backend, api, frontend]
        include:
          - component: backend
            image_name: BACKEND_IMAGE_NAME
            context: rackoptix/backend
          - component: api
            image_name: API_IMAGE_NAME
            context: rackoptix/api
          - component: frontend
            image_name: FRONTEND_IMAGE_NAME
            context: rackoptix/frontend
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env[matrix.image_name] }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update Kubernetes manifests
        run: |
          cd rackoptix/kubernetes
          
          # Set the image tags
          TAG=${GITHUB_SHA::7}
          REGISTRY=${{ env.REGISTRY }}
          
          # Update the image tags in the manifests
          sed -i "s|\${REGISTRY}|$REGISTRY|g" backend.yaml api.yaml frontend.yaml
          sed -i "s|\${TAG}|$TAG|g" backend.yaml api.yaml frontend.yaml
          
          # Apply the manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f database.yaml
          kubectl apply -f backend.yaml
          kubectl apply -f api.yaml
          kubectl apply -f frontend.yaml
          kubectl apply -f monitoring.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/rackoptix-backend -n rackoptix
          kubectl rollout status deployment/rackoptix-api -n rackoptix
          kubectl rollout status deployment/rackoptix-frontend -n rackoptix

  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update Kubernetes manifests
        run: |
          cd rackoptix/kubernetes
          
          # Set the image tags
          TAG=${GITHUB_REF#refs/tags/}
          REGISTRY=${{ env.REGISTRY }}
          
          # Update the image tags in the manifests
          sed -i "s|\${REGISTRY}|$REGISTRY|g" backend.yaml api.yaml frontend.yaml
          sed -i "s|\${TAG}|$TAG|g" backend.yaml api.yaml frontend.yaml
          
          # Apply the manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f database.yaml
          kubectl apply -f backend.yaml
          kubectl apply -f api.yaml
          kubectl apply -f frontend.yaml
          kubectl apply -f monitoring.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/rackoptix-backend -n rackoptix
          kubectl rollout status deployment/rackoptix-api -n rackoptix
          kubectl rollout status deployment/rackoptix-frontend -n rackoptix